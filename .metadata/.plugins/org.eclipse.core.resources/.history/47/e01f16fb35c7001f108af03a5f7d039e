package com.mysite.sbb.answer;

import java.security.Principal;

import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.server.ResponseStatusException;

import com.mysite.sbb.question.Question;
import com.mysite.sbb.question.QuestionService;
import com.mysite.sbb.user.SiteUser;
import com.mysite.sbb.user.UserService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

/*
 * <RequiredArgsConstructor 어노테이션>
 * @RequiredArgsConstructor는 클래스 내의 final 필드와 @NonNull이 붙은 필드를 매개변수로 받는 생성자를 자동으로 생성한다.
 * 
 * 생성자가 호출될 때 스프링은 요구되는 생성자를 확인한 후에 자동으로 생성된 생성자를 사용하여 빈을 주입한다.
 * 
 * <Bean>
 * 빈은 스프링 컨테이너에 의해 관리되는 객체를 가리킨다.
 * 빈은 스프링 애플리케이션 컨텍스트(Application Context)안에서 생성되고,
 * 필요할 때마다 컨테이너에 의해 의존성 주입(Dependency, Injection, DI)된다.
 * 스프링 컨테이너는 빈들을 관리하여 개발자가 객체의 생성 및 소멸을 수동으로 처리할 필요 없이 필요할 때마다 재사용할 수 있도록 지원한다.
 * @Component, @Service, @Repository, @Controller, @Configuration + @Bean
 */
@RequestMapping("/answer")
@Controller
@RequiredArgsConstructor
public class AnswerController {

	private final QuestionService questionService;
	private final AnswerService answerService;
	private final UserService userService;

	/*
	 * @PathVariable("id"): URL 경로에서 변수 값을 추출하여 메서드 매개변수로 전달한다. Principal: 'Spring
	 * Security'에서 제공하는 현재 로그인한 사용자의 정보를 제공하는 객체
	 */
	@PostMapping("/create/{id}")
	@PreAuthorize("isAuthenticated()")
	public String createAnswer(Model model, @PathVariable("id") Integer id, @Valid AnswerForm answerForm,
			BindingResult bindingResult, Principal principal) {
		Question question = this.questionService.getQuestion(id);
		SiteUser siteUser = this.userService.getUser(principal.getName());

		if (bindingResult.hasErrors()) {
			model.addAttribute("question", question);
			return "question_detail";
		}

		this.answerService.create(question, answerForm.getContent(), siteUser);
		return String.format("redirect:/question/detail/%s", id);
	}

	@PreAuthorize("isAuthenticated()")
	@GetMapping("/modify/{id}")
	public String answerModify(AnswerForm answerForm, @PathVariable("id") Integer id, Principal principal) {
		Answer answer = this.answerService.getAnswer(id);
		if (!answer.getAuthor().getUsername().equals(principal.getName())) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "수정 권한이 없습니다.");
		}
		answerForm.setContent(answer.getContent());
		return "answer_form";
	}
}
